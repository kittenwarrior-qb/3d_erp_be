// ==========================
// Prisma Schema (Enhanced Version)
// ==========================
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== ENUMS =====
enum MaterialType {
  WOOD
  METAL
  PLASTIC
  FABRIC
  GLASS
  CERAMIC
  COMPOSITE
  OTHER
}

enum Axis {
  X
  Y
  Z
}

enum QuoteStatus {
  DRAFT
  PENDING
  APPROVED
  REJECTED
  EXPIRED
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

enum ProductStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  OUT_OF_STOCK
}

// ===== AUTHENTICATION =====
model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users           User[]
  rolePermissions RolePermission[]
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  rolePermissions RolePermission[]
}

model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  createdAt    DateTime   @default(now())

  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
}

model User {
  id              String     @id @default(cuid())
  email           String     @unique
  password        String
  fullName        String?
  phone           String?
  avatar          String?
  roleId          String
  status          UserStatus @default(ACTIVE)
  emailVerifiedAt DateTime?
  lastLoginAt     DateTime?
  deletedAt       DateTime?  // Soft delete
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  role            Role       @relation(fields: [roleId], references: [id])
  sessions        Session[]
  quotes          Quote[]
  products        Product[]  @relation("CreatedProducts")

  @@index([email])
  @@index([status])
  @@index([roleId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  refreshToken String   @unique
  userAgent    String?
  ip           String?
  expiresAt    DateTime
  createdAt    DateTime @default(now())

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// ===== PRODUCT DATA =====
model Category {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  products    Product[]
}

model Material {
  id            String       @id @default(cuid())
  name          String       @unique
  code          String       @unique // Mã vật liệu
  type          MaterialType
  unitPrice     Float        // đơn giá vật liệu (VD: VND/m²)
  unit          String       @default("m²") // đơn vị tính
  textureUrl    String?      // ảnh preview chất liệu
  colorHex      String?      // mã màu dùng cho Three.js
  density       Float?       // khối lượng riêng (kg/m³)
  description   String?
  supplier      String?      // nhà cung cấp
  isActive      Boolean      @default(true)
  deletedAt     DateTime?    // Soft delete
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  products      Product[]
  quotes        Quote[]

  @@index([type])
  @@index([isActive])
  @@index([code])
}

model Product {
  id             String        @id @default(cuid())
  sku            String        @unique // Mã sản phẩm
  name           String
  description    String?
  imageUrl       String?
  modelUrl       String        // file 3D (.glb / .gltf)
  categoryId     String
  materialId     String
  createdById    String
  status         ProductStatus @default(DRAFT)
  basePrice      Float?        // Giá cơ bản
  defaultWidth   Float
  defaultHeight  Float
  defaultDepth   Float
  weight         Float?        // Trọng lượng (kg)
  tags           String[]      // Tags cho tìm kiếm
  viewCount      Int           @default(0)
  deletedAt      DateTime?     // Soft delete
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  category       Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  material       Material      @relation(fields: [materialId], references: [id], onDelete: Cascade)
  createdBy      User          @relation("CreatedProducts", fields: [createdById], references: [id])
  parts          ProductPart[]
  quotes         Quote[]
  variants       ProductVariant[]

  @@index([categoryId])
  @@index([materialId])
  @@index([status])
  @@index([sku])
  @@index([createdById])
}

model ProductPart {
  id            String    @id @default(cuid())
  productId     String
  name          String    // ví dụ: "Chân ghế", "Mặt bàn"
  geometryName  String    // node name trong Three.js model
  axis          Axis      // trục có thể thay đổi kích thước
  minScale      Float?
  maxScale      Float?
  priceFactor   Float?    // hệ số ảnh hưởng tới giá
  isRequired    Boolean   @default(true)
  createdAt     DateTime  @default(now())

  product       Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

// ===== PRODUCT VARIANTS =====
model ProductVariant {
  id            String    @id @default(cuid())
  productId     String
  name          String    // ví dụ: "Kích thước S", "Màu đỏ"
  sku           String    @unique
  priceModifier Float     @default(0) // Thay đổi giá so với sản phẩm gốc
  imageUrl      String?
  isDefault     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  product       Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([sku])
}

// ===== QUOTATION =====
model Quote {
  id            String      @id @default(cuid())
  quoteNumber   String      @unique // Số báo giá
  userId        String
  productId     String
  materialId    String
  customWidth   Float
  customHeight  Float
  customDepth   Float
  quantity      Int         @default(1)
  unitPrice     Float
  totalPrice    Float
  status        QuoteStatus @default(DRAFT)
  notes         String?
  validUntil    DateTime?   // Thời hạn báo giá
  approvedAt    DateTime?
  approvedBy    String?
  rejectedAt    DateTime?
  rejectionReason String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  user          User        @relation(fields: [userId], references: [id])
  product       Product     @relation(fields: [productId], references: [id])
  material      Material    @relation(fields: [materialId], references: [id])

  @@index([userId])
  @@index([productId])
  @@index([status])
  @@index([quoteNumber])
  @@index([createdAt])
}
